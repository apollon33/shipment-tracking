{"version":3,"sources":["../../src/api/tracking.js"],"names":["data","serviceIndicatorCode","shipmentType","letters","Math","floor","random","serialDigits","Date","getTime","toString","s","checkSum","checkSumDigit","countryCode","sourceAdress","country","trackingNumber","shipmentObj","states","assessStates","date","date2","JSON","parse","stringify","setHours","getHours","date3","setDate","getDate","date4","date5","name","location","street","housenumber","postcode","city","time","image","notice","toLocaleTimeString","scanned","isValidTrackingNumber","substring"],"mappings":"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","file":"tracking.js","sourcesContent":["const letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\nlet assessStates = function(){\r\n    /* normally here we would generate states according to the optimal logistic way for the shipment to happen\r\n    * but I will only mock this part, since I don't have the necessary data to execute such a calculation.\r\n    * We only get the states for the predifined use case of Oma Paschulke to Enkel Max */\r\n    let date = new Date();\r\n    let date2 = new Date(JSON.parse(JSON.stringify(date))).setHours(date.getHours()+5);\r\n    let date3 = new Date(new Date(JSON.parse(JSON.stringify(date))).setDate(date.getDate()+1)).setHours(date.getHours()+4);\r\n    let date4 = new Date(new Date(JSON.parse(JSON.stringify(date)))).setDate(date.getDate()+2);\r\n    let date5 =new Date(new Date(JSON.parse(JSON.stringify(date))).setDate(date.getDate()+2)).setHours(date.getHours()+6);\r\n    return [\r\n        {\r\n            /* Paketshop irgendwo Hamburg */\r\n            name: 'Paketshop Hamburg',\r\n            location: {\r\n                street: 'Hauptstraße',\r\n                housenumber: '1',\r\n                postcode: '0234',\r\n                city: 'Hamburg',\r\n                country: 'Germany'\r\n            },\r\n            time: date,\r\n            image: 'small-office.svg',\r\n            notice: `Paket wurde um ${date.toLocaleTimeString()} an einen Fahrer übergeben\r\n                    und befindet sich auf dem Weg in die Niederlassung Hamburg`,\r\n            scanned: true\r\n        },\r\n        {\r\n            /* Niederlassung Hamburg */\r\n            name: 'Niederlassung Hamburg',\r\n            location: {\r\n                street: 'Hamburgerstraße',\r\n                housenumber: '2',\r\n                postcode: '0234',\r\n                city: 'Hamburg',\r\n                country: 'Germany'\r\n            },\r\n            time: date2,\r\n            image: 'office.svg',\r\n            scanned: false\r\n        },\r\n        {\r\n            /* Regionales Verteilzentrum Niedersachsen */\r\n            name: 'Regionales Verteilzentrum Niedersachsen',\r\n            location: {\r\n                street: 'Niedersachsener Straße',\r\n                housenumber: '3',\r\n                postcode: '23331',\r\n                city: 'Osnabrück',\r\n                country: 'Germany'\r\n            },\r\n            time: date3,\r\n            image: 'logistic_center.svg',\r\n            scanned: false\r\n        },\r\n        {\r\n            /* Niederlassung München */\r\n            name: 'Niederlassung München',\r\n            location: {\r\n                street: 'Oktoberfeststraße',\r\n                housenumber: '4',\r\n                postcode: '8898',\r\n                city: 'München',\r\n                country: 'Germany'\r\n            },\r\n            time: date4,\r\n            image: 'office.svg',\r\n            scanned: false\r\n        },\r\n        {\r\n            /* Zustellung Ziel */\r\n            name: 'Haus Enkel Max',\r\n            location: {\r\n                street: 'Zielstraße',\r\n                housenumber: '5',\r\n                postcode: '8983',\r\n                city: 'München',\r\n                country: 'Germany'\r\n            },\r\n            time: date5,\r\n            image: 'haus.png',\r\n            scanned: false\r\n        }\r\n    ]\r\n}\r\nexport const isValidTrackingNumber = function (trackingNumber) {\r\n    /* get the 9 digits and validate the checksum */\r\n    let serialDigits = trackingNumber.substring(2,11);\r\n    const s = serialDigits;\r\n\r\n    /* checksum calculation by https://en.wikipedia.org/wiki/S10_(UPU_standard) */\r\n    let checkSum = +s[0]*8 + s[1]*6 + s[2]*4 + s[3]*2 + s[4]*3 + s[5]*5 + s[6]*9 + s[7]*7;\r\n    let checkSumDigit = 11 - (checkSum % 11);\r\n    if (checkSumDigit == 10) checkSumDigit = 0;\r\n    if (checkSumDigit == 11) checkSumDigit = 5;\r\n\r\n    return checkSumDigit == s[8];\r\n}\r\n\r\nexport default function (data) {\r\n    /* generate unique tracking number\r\n    *  service indicator code as of S10 UPU Standard https://en.wikipedia.org/wiki/S10_(UPU_standard) */\r\n    let serviceIndicatorCode = '';\r\n    // console.log('req', data)\r\n    switch(data.shipmentType){\r\n        case 'parcel': serviceIndicatorCode = 'C' + letters[Math.floor(Math.random()*100) % 26];\r\n        case 'letter': serviceIndicatorCode = 'L' + letters[Math.floor(Math.random()*100) % 26];\r\n        case 'large letter': serviceIndicatorCode = 'L' + letters[Math.floor(Math.random()*100) % 26];\r\n        case 'postcard': serviceIndicatorCode = 'L' + letters[Math.floor(Math.random()*100) % 26];\r\n        /* ... etc. for all shipment types */\r\n        default: serviceIndicatorCode = 'L' + letters[Math.floor(Math.random()*100) % 26];\r\n    }\r\n\r\n    /* random serial digit derived from timestamp of max length 8 digits */\r\n    let serialDigits = (new Date().getTime() % 100000000).toString(10)\r\n    const s = serialDigits;\r\n\r\n    /* checksum calculation by https://en.wikipedia.org/wiki/S10_(UPU_standard) */\r\n    let checkSum = +s[0]*8 + s[1]*6 + s[2]*4 + s[3]*2 + s[4]*3 + s[5]*5 + s[6]*9 + s[7]*7;\r\n    let checkSumDigit = 11 - (checkSum % 11);\r\n    if (checkSumDigit == 10) checkSumDigit = 0;\r\n    if (checkSumDigit == 11) checkSumDigit = 5;\r\n\r\n    let countryCode = 'DE';\r\n    switch(data.sourceAdress.country){\r\n        case 'Deutschland': countryCode = 'DE';\r\n        case 'England': countryCode = 'EN';\r\n        /* ... etc. */\r\n        default: countryCode = 'DE';\r\n    }\r\n\r\n    let trackingNumber = serviceIndicatorCode + serialDigits + checkSumDigit + countryCode;\r\n    const shipmentObj = {\r\n        ...data,\r\n        trackingNumber,\r\n        states: assessStates() /* data is mocked specifically for the use case */\r\n    }\r\n    return shipmentObj;\r\n}\r\n"]}