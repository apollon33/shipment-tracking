{"version":3,"sources":["../../src/api/tracking.js"],"names":["letters","GEO_CACHE","googleMapsApi","create","baseURL","timeout","getGeolocationFromGoogleMaps","data","location","city","latitude","lat","longitude","long","Promise","resolve","reject","get","key","encodeURIComponent","then","response","results","length","info","geometry","lng","console","log","JSON","stringify","catch","err","assessStates","date","Date","date2","parse","setHours","getHours","date3","setDate","getDate","date4","date5","all","spread","location1","location2","location3","location4","location5","name","street","housenumber","postcode","country","time","image","notice","toLocaleTimeString","scanned","isValidTrackingNumber","trackingNumber","serialDigits","substring","s","checkSum","checkSumDigit","serviceIndicatorCode","shipmentType","Math","floor","random","getTime","toString","countryCode","sourceAdress","states"],"mappings":"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","file":"tracking.js","sourcesContent":["import axios from 'axios'\r\nimport { google } from '../config/google'\r\n\r\nconst letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nlet GEO_CACHE = {};\r\n\r\nlet googleMapsApi = function() {\r\n    return axios.create({\r\n        baseURL: 'https://maps.googleapis.com',\r\n        timeout: 5000\r\n    })\r\n}();\r\n\r\n\r\n/* It fetches the geolocation of the city name by using google geocode api\r\n * @params: data (Object) contains a city property, which is to be found by the google api\r\n * @returns {Object} with city, longitude and longitude properties\r\n*/\r\nconst getGeolocationFromGoogleMaps = async function ( data ) {\r\n    let location = data.city;\r\n\r\n    /* no need to refetch data from google apis if we already fetched it for a previous task */\r\n    if (location in GEO_CACHE) {\r\n        // console.log( 'Cached ' + location + ' -> ' + GEO_CACHE[location].lat +  ' ' + GEO_CACHE[location].long );\r\n        data.latitude = GEO_CACHE[location].lat;\r\n        data.longitude = GEO_CACHE[location].long;\r\n        return new Promise((resolve, reject) => { resolve(data) })\r\n    }\r\n\r\n    return googleMapsApi.get('/maps/api/geocode/json?key=' + google.key + '&address=' + encodeURIComponent(location))\r\n        .then((response) => {\r\n            if (response.data.results.length > 0) {\r\n                let info = {\r\n                    lat: response.data.results[0].geometry.location.lat,\r\n                    long: response.data.results[0].geometry.location.lng\r\n                };\r\n                GEO_CACHE[location] = info;\r\n                data.latitude = info.lat;\r\n                data.longitude = info.long;\r\n                console.log(location + ' -> ' + info.lat + ' ' + info.long);\r\n                return data\r\n            } else { console.log( \"Didn't find anything for \" + location + ' ::' + JSON.stringify(response.data) ); }\r\n        }).catch((err) => console.log('Error on ' + location + ' :' + err) );\r\n};\r\n\r\n\r\n/* creates a mocked states array for the purpose of the given scenario\r\n * @return list of state objects */\r\nlet assessStates = function(){\r\n    /* normally here we would generate states according to the optimal logistic way for the shipment to happen\r\n    * but I will only mock this part for simplicity reasons, since I don't have the necessary data to execute such a calculation.\r\n    * We only get the states for the predifined use case of Oma Paschulke to Enkel Max */\r\n    const date = new Date();\r\n    const date2 = new Date(JSON.parse(JSON.stringify(date))).setHours(date.getHours()+5);\r\n    const date3 = new Date(new Date(JSON.parse(JSON.stringify(date))).setDate(date.getDate()+1)).setHours(date.getHours()+4);\r\n    const date4 = new Date(new Date(JSON.parse(JSON.stringify(date)))).setDate(date.getDate()+2);\r\n    const date5 = new Date(new Date(JSON.parse(JSON.stringify(date))).setDate(date.getDate()+2)).setHours(date.getHours()+6);\r\n\r\n\r\n    /* Fetch the geolocation data for each city on the whole shipment track, harvest caching when possible.\r\n     * We use a forking of 5 parallel promise requests for each state entries town.\r\n     * Then we join all promises and wait until all return (getting resolved or rejected)\r\n     */\r\n    return axios.all([\r\n        getGeolocationFromGoogleMaps({ city: 'Hamburg' }),\r\n        getGeolocationFromGoogleMaps({ city: 'Hamburg' }),\r\n        getGeolocationFromGoogleMaps({ city: 'Osnabrück' }),\r\n        getGeolocationFromGoogleMaps({ city: 'München' }),\r\n        getGeolocationFromGoogleMaps({ city: 'München' })\r\n    ])\r\n        .then(axios.spread(function (location1, location2, location3, location4, location5) {\r\n            // console.log('locations', location1, location2, location3, location4, location5)\r\n            return [\r\n                {\r\n                    /* Packetshop somewhere in Hamburg */\r\n                    name: 'Paketshop Hamburg',\r\n                    location: {\r\n                        street: 'Hauptstraße',\r\n                        housenumber: '1',\r\n                        postcode: '0234',\r\n                        city: location1.city || 'Hamburg',\r\n                        country: 'Germany',\r\n                        latitude: location1.latitude,\r\n                        longitude: location1.longitude\r\n                    },\r\n                    time: date,\r\n                    image: 'small-office.svg',\r\n                    notice: `Paket wurde um ${date.toLocaleTimeString()} an einen Fahrer übergeben\r\n                    und befindet sich auf dem Weg in die Niederlassung Hamburg`,\r\n                    scanned: true\r\n                },\r\n                {\r\n                    /* Niederlassung Hamburg */\r\n                    name: 'Niederlassung Hamburg',\r\n                    location: {\r\n                        street: 'Hamburgerstraße',\r\n                        housenumber: '2',\r\n                        postcode: '0234',\r\n                        city: location2.city || 'Hamburg',\r\n                        country: 'Germany',\r\n                        latitude: location2.latitude,\r\n                        longitude: location2.longitude\r\n                    },\r\n                    time: date2,\r\n                    image: 'office.svg',\r\n                    scanned: false\r\n                },\r\n                {\r\n                    /* Regionales Verteilzentrum Niedersachsen */\r\n                    name: 'Regionales Verteilzentrum Niedersachsen',\r\n                    location: {\r\n                        street: 'Niedersachsener Straße',\r\n                        housenumber: '3',\r\n                        postcode: '23331',\r\n                        city: location3.city || 'Osnabrück',\r\n                        country: 'Germany',\r\n                        latitude: location3.latitude,\r\n                        longitude: location3.longitude\r\n                    },\r\n                    time: date3,\r\n                    image: 'logistic_center.svg',\r\n                    scanned: false\r\n                },\r\n                {\r\n                    /* Niederlassung München */\r\n                    name: 'Niederlassung München',\r\n                    location: {\r\n                        street: 'Oktoberfeststraße',\r\n                        housenumber: '4',\r\n                        postcode: '8898',\r\n                        city: location4.city || 'München',\r\n                        country: 'Germany',\r\n                        latitude: location4.latitude,\r\n                        longitude: location4.longitude\r\n                    },\r\n                    time: date4,\r\n                    image: 'office.svg',\r\n                    scanned: false\r\n                },\r\n                {\r\n                    /* Zustellung Ziel */\r\n                    name: 'Haus Enkel Max',\r\n                    location: {\r\n                        street: 'Zielstraße',\r\n                        housenumber: '5',\r\n                        postcode: '8983',\r\n                        city: location5.city || 'München',\r\n                        country: 'Germany',\r\n                        latitude: location5.latitude,\r\n                        longitude: location5.longitude\r\n                    },\r\n                    time: date5,\r\n                    image: 'haus.png',\r\n                    scanned: false\r\n                }\r\n            ]\r\n        }));\r\n\r\n}\r\n\r\n/* checks if the given tracking number is a S10 UPU compliant tracking number\r\n * @params: trackingNumber (String)\r\n * @returns Boolean\r\n */\r\nexport const isValidTrackingNumber = function (trackingNumber) {\r\n    /* get the 9 digits and validate the checksum */\r\n    let serialDigits = trackingNumber.substring(2,11);\r\n    const s = serialDigits;\r\n\r\n    /* checksum calculation by https://en.wikipedia.org/wiki/S10_(UPU_standard) */\r\n    let checkSum = +s[0]*8 + s[1]*6 + s[2]*4 + s[3]*2 + s[4]*3 + s[5]*5 + s[6]*9 + s[7]*7;\r\n    let checkSumDigit = 11 - (checkSum % 11);\r\n    if (checkSumDigit == 10) checkSumDigit = 0;\r\n    if (checkSumDigit == 11) checkSumDigit = 5;\r\n\r\n    return checkSumDigit == s[8];\r\n}\r\n\r\n/* generate unique tracking number for S10 UPU\r\n * @params: data (Object)\r\n * @returns Boolean\r\n */\r\nexport default async function (data) {\r\n    /* service indicator code as of S10 UPU Standard https://en.wikipedia.org/wiki/S10_(UPU_standard) */\r\n    let serviceIndicatorCode = '';\r\n    // console.log('req', data)\r\n\r\n    switch(data.shipmentType){\r\n        case 'parcel': serviceIndicatorCode = 'C' + letters[Math.floor(Math.random()*100) % 26];\r\n        case 'letter': serviceIndicatorCode = 'L' + letters[Math.floor(Math.random()*100) % 26];\r\n        case 'large letter': serviceIndicatorCode = 'L' + letters[Math.floor(Math.random()*100) % 26];\r\n        case 'postcard': serviceIndicatorCode = 'L' + letters[Math.floor(Math.random()*100) % 26];\r\n        /* ... etc. for all shipment types */\r\n        default: serviceIndicatorCode = 'L' + letters[Math.floor(Math.random()*100) % 26];\r\n    }\r\n\r\n    /* random serial digit derived from timestamp of max length 8 digits */\r\n    let serialDigits = (new Date().getTime() % 100000000).toString(10)\r\n    const s = serialDigits;\r\n\r\n    /* checksum calculation by https://en.wikipedia.org/wiki/S10_(UPU_standard) */\r\n    let checkSum = +s[0]*8 + s[1]*6 + s[2]*4 + s[3]*2 + s[4]*3 + s[5]*5 + s[6]*9 + s[7]*7;\r\n    let checkSumDigit = 11 - (checkSum % 11);\r\n    if (checkSumDigit == 10) checkSumDigit = 0;\r\n    if (checkSumDigit == 11) checkSumDigit = 5;\r\n\r\n    let countryCode = 'DE';\r\n    switch(data.sourceAdress.country){\r\n        case 'Deutschland': countryCode = 'DE';\r\n        case 'England': countryCode = 'EN';\r\n        /* ... etc. */\r\n        default: countryCode = 'DE';\r\n    }\r\n\r\n    let trackingNumber = serviceIndicatorCode + serialDigits + checkSumDigit + countryCode;\r\n\r\n    return assessStates()\r\n        .then((states) => {\r\n            return {\r\n                ...data,\r\n                trackingNumber,\r\n                states: states /* data is mocked specifically for the use case */\r\n            };\r\n        })\r\n}\r\n"]}